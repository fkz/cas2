// Generated by Bisonc++ V2.4.5 on Sun, 18 Oct 2009 19:14:58 +0200
//Modified manually!

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
#include "Lexer.h"


#undef Parser
class Parser: public ParserBase
{
        
    public:
      //Modified part
      
      Parser (std::ostream &output, std::istream *in = 0, std::ostream *out = 0)
      : lexer (in, out), output (output) { }
      
  private:
    MyLexer lexer;
    std::ostream &output;
      
  public:
      //End Modified part
      
        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex()
	{
	  int result = lexer.yylex();
	  d_val__ = lexer.GetType();
	  return result;
	}
	// returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
	void addLibrary (std::string *filename, std::string *name);
};

inline void Parser::error(char const *msg)
{
    std::cerr << msg << std::endl;
}

// $insert lex

inline void Parser::print()      // use d_token, d_loc
{}


#endif
